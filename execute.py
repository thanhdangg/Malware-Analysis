import pefile
import lief
import yara
import capstone

class MalwareAnalyzer:
    def __init__(self, file_path):
        self.file_path = file_path
        self.pe = None
        self.lief_binary = None
        self.yara_rules = None
        self.capstone_disasm = None

    def static_analysis(self):
        # static analysis using pefile
        self.pe = pefile.PE(self.file_path)
        print("PE Analysis:")
        print(f"Number of sections: {len(self.pe.sections)}")
        
        # static_analysis using lief
        self.lief_binary = lief.parse(self.file_path)
        print("LIEF Analysis:")
        print(f"Entry point: {self.lief_binary.entrypoint}")

        # static_analysis using yara
        # Check if the rules file exists
        try:
            with open('rules.yar', 'r') as f:
                # File exists, proceed with compilation
                self.yara_rules = yara.compile(filepath='rules.yar')
                matches = self.yara_rules.match(self.file_path)
                print("YARA Analysis:")
                for match in matches:
                    print(f"Match: {match}")
        except FileNotFoundError:
            # Handle the case where the file is not found
            print("Error: rules.yar not found. Please make sure the file exists and the path is correct.")


    def dynamic_analysis(self):
        # dynamic analysis using capstone
        with open(self.file_path, 'rb') as f:
            code = f.read()
        self.capstone_disasm = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_32)
        for i in self.capstone_disasm.disasm(code, 0x1000):
            print(f"0x{i.address:x}:\t{i.mnemonic}\t{i.op_str}")

    def analyze(self):
        self.static_analysis()
        self.dynamic_analysis()

